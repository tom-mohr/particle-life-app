import org.gradle.internal.os.OperatingSystem

plugins {
    id "java"
    id "application"
}

def buildDir = layout.buildDirectory.get().asFile
def workingDir = "$buildDir/app"

application {
    mainClass = "com.particle_life.app.Main"  // required for "run" task

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
    }
}

// copy resources to build directory
tasks.register("copyResources", Copy) {
    from "$projectDir/src/main/resources"
    into workingDir
}

run {
    dependsOn(tasks.copyResources)
    delegate.workingDir = workingDir
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'com.particle_life.app.Main'
}

// Create a fat jar with all dependencies
task fatJar(type: Jar) {
    archiveBaseName = 'particle-life-app-all'
    archiveClassifier = ''

    manifest {
        attributes 'Main-Class': 'com.particle_life.app.Main'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Create macOS app using jpackage
task createMacApp(type: Exec) {
    dependsOn fatJar

    doFirst {
        delete "$buildDir/dist"

        def jpackageArgs = [
            'jpackage',
            '--type', 'app-image',
            '--name', 'ParticleLife',
            '--input', 'build/libs',
            '--main-jar', fatJar.archiveFileName.get(),
            '--dest', "$buildDir/dist"
        ]

        // Add icon if it exists
        def iconFile = file('src/main/resources/icon.icns')
        if (iconFile.exists()) {
            jpackageArgs.addAll(['--icon', iconFile.absolutePath])
        }

        commandLine jpackageArgs
    }
}


// Create DMG installer
task createDmg(type: Exec) {
    dependsOn createMacApp

    doFirst {
        def dmgArgs = [
            'jpackage',
            '--type', 'dmg',
            '--name', 'ParticleLife',
            '--app-image', "$buildDir/dist/ParticleLife.app",
            '--dest', "$buildDir/dist"
        ]

        commandLine dmgArgs
    }
}

// Convenience task
task packageMacOS {
    dependsOn createDmg
    doLast {
        println "macOS app created at: $buildDir/dist/ParticleLife.app"
        println "DMG installer created at: $buildDir/dist/ParticleLife-1.0.dmg"
    }
}

group 'com.particle.life.app'

ext {
    lwjglVersion = '3.3.0'
    imguiVersion = '1.86.2'
}

jar {
    // This ignores all resource files when bundling the JAR.
    // Reason: We don't want our "resources" files to be included
    // in the JAR, but instead outside, next to the executable.
    processResources.exclude('*')
}

project.ext.lwjglVersion = "3.3.0"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.natives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.natives = "macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.natives = osArch.contains("64")
                ? "windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "windows-x86"
        break
}

repositories {
    mavenCentral()
    mavenLocal()

    // JitPack allows to easily add dependencies on GitHub repos
    // (e.g. implementation 'com.github.User:Repo:Tag')
    maven { url "https://jitpack.io" }  // this line should be at the end of the repositories
}

dependencies {

    // Particle Life Backend
    implementation "com.github.tom-mohr:particle-life:v0.5.1"

    // YAML Parser "YamlBeans"
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.17'

    // TOML Parser
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'

    // Apache Commons Text (for Levenshtein distance)
    implementation 'org.apache.commons:commons-text:1.12.0'

    // Linear Algebra Library "JOML"
    implementation 'org.joml:joml:1.10.1'

    // GUI Library "Dear ImGui"
    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-$natives:$imguiVersion"

    // LWJGL (Lightweight Java Game Library)
    // see https://www.lwjgl.org/customize for a list of all available contents
    [".lwjgl", ".glfw", ".opengl", ".stb"].each {
        implementation "org.lwjgl.osgi:org.lwjgl$it:$lwjglVersion"
    }
}
